% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/benchmark_markov.R
\name{benchmark_markov}
\alias{benchmark_markov}
\title{Benchmarks Markov Model Simulation Approaches}
\usage{
benchmark_markov(
  markov_model = NULL,
  reference = NULL,
  duration = NULL,
  samples = NULL,
  times = 1
)
}
\arguments{
\item{markov_model}{A list of functions that define a markov model across multiple interventions. See \code{example_two_state_markov}
for the correct format.}

\item{reference}{Function, the reference model to compare the \code{SpeedyMarkov} approaches to. An example
of a reference model is \code{reference_two_state_markov}.}

\item{duration}{Numeric, how many long to run the model for.}

\item{samples}{Numeric, defaults to 1. The number of markov model samples to use.}

\item{times}{Numeric, the number of times to repeat the benchmark. Defaults to once. Repeating the benchmark
can help control for stochastic effects.}
}
\value{
Returns a \code{microbenchmark} data.frame of benchmarking results
}
\description{
This function runs a benchmark across multiple approaches to Markov model
simulation. This includes multiple approaches using \code{Rcpp} and different strategies for parallisation.
Unless otherwise stated the default settings for \code{SpeedyMarkov} are used (which are to maximise the use
of \code{Rcpp}). \strong{Note: \code{mclapply} uses mutlicore parallisation which is only available on Mac and Linux. \code{future}
and \code{furrr} default to multicore parallisation but this will again not be used on Windows or in an interactive
Rstudio session. This may impact benchmark performance.}).

This function relies on suggested packages and so requires the installation of the following packages:
\itemize{
\item microbenchmark
\item furrr
}
}
\examples{

\dontrun{
# Run a benchmark across approaches for a small number of samples 
results <- benchmark_markov(markov_model = example_two_state_markov,
                            reference = reference_two_state_markov,
                            duration = 100, samples = 1000,
                            times = 10)
                                
results


ggplot2::autoplot(results)
}
}
